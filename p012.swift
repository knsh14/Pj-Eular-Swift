//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
//1: 1
//3: 1,3
//6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

func getPrimes() -> [Int] {
    var nums = Array(2..<120000)
    var primes : [Int] = []
    while primes.count < 50 {
        let prime = nums.first!
        primes.append(prime)
        nums = nums.filter({(i : Int) -> Bool in return i % prime != 0})
    }
    return primes
}

let primes = getPrimes()

func factorPrimeNumbers(var num : Int) -> [String: Int] {
    var factorPrimes = [String: Int]()
    for p in primes {
        while num % p == 0 {
            num /= p
            if factorPrimes.indexForKey(String(p)) != nil {
                factorPrimes[String(p)]!++
            } else {
                factorPrimes.updateValue(1, forKey: String(p))
            }
        }
        if num == 1 {
            return factorPrimes
        }
    }
    return factorPrimes
}

func divisorCount(num: Int) -> Int {
    let factors = factorPrimeNumbers(num)

    return factors.values.reduce(1, combine: {$0 * ($1 + 1)})
}

// print(divisorCount(360))

var num = 3
var triangleNumber = Array(1...num).reduce(0, combine: {$0 + $1})
while true {
    num++
    triangleNumber += num
    if num % 100 == 0 {
        print(num)
    }
    if divisorCount(triangleNumber) > 500 {
        print(triangleNumber)
        break
    }
    // print(divisors(triangleNumber))
}

